#!/usr/bin/env python3
"""Knowledge Management Tools for CortexMCP.

Implements the Knowledge Management MVP with start-retrospective and 
process-retrospective tools for systematic organizational memory capture.

Following the 4 Principios Rectores:
1. Dogmatismo con Universal Response Schema ✅
2. Servidor como Ejecutor Fiable ✅ 
3. Estado en Claude, NO en Servidor ✅
4. Testing Concurrente ✅
"""

import json
import os
import re
from datetime import datetime
from typing import Optional


def start_retrospective(
    task_name: str,
    phase_context: Optional[str] = None,
    duration_estimate: Optional[str] = None
) -> str:
    """Create a structured retrospective draft in .cortex/retrospectives/.
    
    Following Knowledge Management MVP pattern:
    1. Generate timestamped filename
    2. Create Markdown template with standard sections
    3. Populate basic metadata
    4. Return claude_instructions to complete analysis
    
    Args:
        task_name: Name/description of completed task
        phase_context: Optional phase or project context  
        duration_estimate: Optional duration information
        
    Returns:
        JSON string containing StrategyResponse with draft creation result
        
    Raises:
        ValueError: If task_name validation fails or file operations fail
    """
    try:
        # Validate inputs
        if len(task_name.strip()) < 3:
            raise ValueError("task_name must be at least 3 characters long")
        if len(task_name) > 200:
            raise ValueError("task_name must be at most 200 characters long")
        
        # Generate timestamped filename
        timestamp = datetime.now().strftime("%Y-%m-%d")
        safe_task_name = "".join(c for c in task_name if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_task_name = safe_task_name.replace(' ', '_').lower()
        filename = f"{timestamp}_{safe_task_name}.md"
        filepath = os.path.join(".cortex", "retrospectives", filename)
        
        # Create retrospective template
        template_content = f"""# Retrospective: {task_name}

**Date**: {datetime.now().strftime("%Y-%m-%d")}  
**Phase Context**: {phase_context or "Not specified"}  
**Duration**: {duration_estimate or "Not specified"}  
**Analysis Confidence**: [To be completed by Claude]  

---

## 🎯 Executive Summary

[Provide a brief overview of the task, its objectives, and key outcomes]

---

## 📊 Process Efficiency Analysis

### Plan vs. Reality Comparison
[Compare original expectations with actual execution]

### Achievements
[List what went well and was accomplished successfully]

### Deviations  
[Identify areas where execution differed from plan]

---

## 🏗️ Architecture Analysis

### Adherence to Core Principles
[Evaluate how well the implementation followed established principles]

### Code Quality Assessment
[Assess the quality of technical decisions and implementations]

---

## 🚧 Bottlenecks and Friction Analysis

### Time Distribution Analysis
[Break down where time was spent and identify inefficiencies]

### Process Friction Identified
[Identify specific obstacles and smooth processes]

---

## 📋 Improvement Suggestions

### Specific Recommendations
[Provide concrete, actionable improvement suggestions]

---

## 📊 Key Learnings & Action Items

### What Went Well
[Celebrate successes and effective practices]

### What Could Be Improved
[Honest assessment of areas for improvement]

### Action Items
[Specific next steps and follow-up tasks]

---

*Retrospective generated by start-retrospective tool*  
*To be completed by Claude analysis*  
*File: {filepath}*
"""
        
        # Ensure directory exists
        os.makedirs(os.path.dirname(filepath), exist_ok=True)
        
        # Write template to file
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(template_content)
        
        # Create StrategyResponse
        response_data = {
            "strategy": {
                "name": "retrospective-draft-creation",
                "version": "1.0.0",
                "type": "learning"
            },
            "user_facing": {
                "summary": f"📝 Retrospective draft created for '{task_name}'",
                "key_points": [
                    f"✅ Created structured template: {filepath}",
                    "📋 Template includes standard analysis sections",
                    "🧠 Ready for Claude intelligence completion",
                    "💾 Saved in .cortex/retrospectives/ knowledge base"
                ],
                "next_steps": [
                    "1. Review the generated template structure",
                    "2. Complete each section with detailed analysis",
                    "3. Focus on actionable insights and learnings",
                    "4. Use process-retrospective tool when complete"
                ]
            },
            "claude_instructions": {
                "execution_type": "immediate",
                "actions": [
                    {
                        "type": "complete_retrospective_analysis",
                        "description": f"Complete the retrospective analysis in {filepath}",
                        "priority": 1,
                        "guidance": [
                            "Read the generated template carefully",
                            "Complete each section with thoughtful analysis",
                            "Focus on concrete insights and actionable improvements",
                            "Maintain honest assessment of both successes and challenges",
                            "Ensure analysis provides value for future planning"
                        ]
                    }
                ]
            },
            "payload": {
                "retrospective_file": filepath,
                "task_name": task_name,
                "phase_context": phase_context,
                "duration_estimate": duration_estimate,
                "template_sections": [
                    "Executive Summary",
                    "Process Efficiency Analysis", 
                    "Architecture Analysis",
                    "Bottlenecks and Friction Analysis",
                    "Improvement Suggestions",
                    "Key Learnings & Action Items"
                ],
                "next_tool": "process-retrospective",
                "workflow_status": "draft_created"
            },
            "metadata": {
                "confidence_score": 1.0,
                "complexity_score": 1,
                "tool_version": "1.0.0-mvp",
                "knowledge_management": True
            }
        }
        
        # Return JSON response (validated structure)
        return json.dumps(response_data, indent=2, ensure_ascii=False)
        
    except Exception as e:
        raise ValueError(f"start-retrospective execution failed: {str(e)}")


def process_retrospective(retrospective_file: str) -> str:
    """Process completed retrospective and integrate insights into knowledge base.
    
    Following Knowledge Management MVP pattern:
    1. Parse Markdown retrospective for insights
    2. Extract improvement suggestions and action items
    3. Update .cortex/ideas/improvements.json
    4. Return integration summary
    
    Args:
        retrospective_file: Path to completed retrospective file
        
    Returns:
        JSON string containing StrategyResponse with integration results
        
    Raises:
        ValueError: If file not found or processing fails
    """
    try:
        # Validate file exists
        if not os.path.exists(retrospective_file):
            raise ValueError(f"Retrospective file not found: {retrospective_file}")
        
        # Read retrospective content
        with open(retrospective_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extract improvement suggestions (simple parsing with flexible emoji matching)
        improvements_section = re.search(r'##.*Improvement Suggestions(.*?)(?=##|$)', content, re.DOTALL)
        action_items_section = re.search(r'##.*Key Learnings.*Action Items(.*?)(?=##|$)', content, re.DOTALL)
        
        extracted_improvements = []
        
        if improvements_section:
            # Simple bullet point extraction
            suggestions = re.findall(r'[-*]\s*(.+)', improvements_section.group(1))
            for suggestion in suggestions:
                if len(suggestion.strip()) > 10:  # Filter meaningful suggestions
                    extracted_improvements.append({
                        "description": suggestion.strip(),
                        "source": "retrospective_analysis",
                        "category": "workflow"  # Default category for MVP
                    })
        
        if action_items_section:
            # Extract action items as improvements
            actions = re.findall(r'[-*]\s*(.+)', action_items_section.group(1))
            for action in actions:
                if len(action.strip()) > 10:
                    extracted_improvements.append({
                        "description": action.strip(),
                        "source": "retrospective_action_items", 
                        "category": "workflow"
                    })
        
        # Load existing improvements.json
        improvements_file = ".cortex/ideas/improvements.json"
        try:
            with open(improvements_file, 'r', encoding='utf-8') as f:
                improvements_data = json.load(f)
        except FileNotFoundError:
            # Create basic structure if file doesn't exist
            improvements_data = {
                "improvements": [],
                "metrics": {"total_improvements": 0}
            }
        
        # Add new improvements (append-only strategy for MVP)
        new_improvement_ids = []
        for improvement in extracted_improvements:
            # Generate unique ID
            existing_ids = [imp.get("id", "") for imp in improvements_data.get("improvements", [])]
            next_id = len(existing_ids) + 1
            improvement_id = f"imp_{next_id:03d}"
            while improvement_id in existing_ids:
                next_id += 1
                improvement_id = f"imp_{next_id:03d}"
            
            # Add improvement entry
            new_improvement = {
                "id": improvement_id,
                "title": improvement["description"][:80] + "..." if len(improvement["description"]) > 80 else improvement["description"],
                "description": improvement["description"],
                "category": improvement["category"],
                "source": improvement["source"],
                "date_added": datetime.now().strftime("%Y-%m-%d"),
                "priority": {
                    "effort": 3,  # Default for MVP
                    "impact": 3,  # Default for MVP  
                    "score": 3.0
                },
                "status": "identified",
                "implementation_plan": None,
                "related_phases": [],
                "tags": ["retrospective_analysis", "knowledge_management"]
            }
            
            improvements_data["improvements"].append(new_improvement)
            new_improvement_ids.append(improvement_id)
        
        # Update metrics
        improvements_data["metrics"]["total_improvements"] = len(improvements_data["improvements"])
        
        # Save updated improvements.json
        with open(improvements_file, 'w', encoding='utf-8') as f:
            json.dump(improvements_data, f, indent=2, ensure_ascii=False)
        
        # Create response
        response_data = {
            "strategy": {
                "name": "retrospective-knowledge-integration",
                "version": "1.0.0", 
                "type": "learning"
            },
            "user_facing": {
                "summary": f"🧠 Knowledge integrated from retrospective: {os.path.basename(retrospective_file)}",
                "key_points": [
                    f"📊 Extracted {len(extracted_improvements)} new insights",
                    f"💾 Updated improvements database: {len(new_improvement_ids)} additions",
                    f"🎯 Total improvements now: {improvements_data['metrics']['total_improvements']}",
                    "✅ Knowledge successfully institutionalized"
                ],
                "next_steps": [
                    "1. Review newly added improvements in .cortex/ideas/improvements.json",
                    "2. Consider prioritizing high-impact improvements for implementation",
                    "3. Use strategy-architect for detailed implementation planning",
                    "4. Continue knowledge capture cycle for future tasks"
                ]
            },
            "claude_instructions": {
                "execution_type": "immediate",
                "actions": [
                    {
                        "type": "knowledge_integration_complete",
                        "description": "Retrospective knowledge has been successfully integrated",
                        "next_recommendations": [
                            "Review the extracted improvements for prioritization",
                            "Consider using strategy-architect for implementation planning",
                            "Continue systematic knowledge capture for future tasks"
                        ]
                    }
                ]
            },
            "payload": {
                "retrospective_file": retrospective_file,
                "improvements_extracted": len(extracted_improvements),
                "new_improvement_ids": new_improvement_ids,
                "knowledge_artifacts": [
                    improvements_file,
                    retrospective_file
                ],
                "integration_status": "completed",
                "workflow_status": "knowledge_institutionalized"
            },
            "metadata": {
                "confidence_score": 0.9,
                "complexity_score": 2,
                "tool_version": "1.0.0-mvp",
                "knowledge_management": True
            }
        }
        
        # Return JSON response (validated structure)
        return json.dumps(response_data, indent=2, ensure_ascii=False)
        
    except Exception as e:
        raise ValueError(f"process-retrospective execution failed: {str(e)}")