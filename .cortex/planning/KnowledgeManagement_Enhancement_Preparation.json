{
  "phase_id": "knowledge-mgmt-enhancement",
  "phase_name": "Knowledge Management System Enhancement - Parsing Noise Elimination",
  "project_context": "CortexMCP Knowledge Management Fix - process-retrospective Tool Enhancement",
  "generated_by": "manual_creation_following_phase284prep_pattern",
  "generated_on": "2025-06-22",
  "confidence_level": 0.95,
  "estimated_duration": "1.25 hours",
  "priority": "HIGH",
  "blocks_issue": "knowledge_management_noise_pollution",
  "description": "Fix critical parsing logic in process-retrospective tool that captures noise (headers, metadata, template artifacts) instead of actionable improvements. Transform improvements.json into strategy-architect compatible task specifications following Universal Response Schema patterns.",
  
  "objectives": {
    "primary": "Eliminate parsing noise from improvements.json and enable clean retrospective → task specification → strategy-architect workflow",
    "secondary": [
      "Fix process-retrospective parsing logic to filter headers/metadata/template artifacts",
      "Enhance improvements.json structure to be strategy-architect compatible",
      "Maintain backward compatibility with existing knowledge management system", 
      "Enable direct workflow: retrospective → actionable specs → blueprints",
      "Apply anti-over-engineering principles with strict 75-minute scope"
    ]
  },

  "technical_scope": {
    "files_to_modify": [
      "tools/knowledge_management.py",
      ".cortex/ideas/improvements.json",
      ".cortex/retrospectives/ (validation testing)"
    ],
    "core_functions_to_enhance": [
      "process_retrospective() parsing logic",
      "improvement extraction algorithms",
      "schema validation and quality gates"
    ],
    "integration_points": [
      "process-retrospective MCP tool",
      "improvements.json schema compatibility",
      "strategy-architect workflow readiness"
    ]
  },

  "implementation_plan": {
    "phase_1": {
      "name": "Emergency Parsing Fix",
      "duration": "30 minutes",
      "description": "Stop the bleeding - eliminate noise from improvements.json immediately",
      "tasks": [
        {
          "id": "fix_parsing_001",
          "description": "Enhance process-retrospective parsing logic to filter noise",
          "file": "tools/knowledge_management.py",
          "action": "MODIFY_PARSING_LOGIC",
          "changes": [
            "Add quality gates: minimum content length (>20 chars)",
            "Filter section headers (### Action Items, ## Summary)", 
            "Remove template metadata (*Generated by*, *File: .cortex/*)",
            "Remove navigation text ([To be completed by Claude])",
            "Add actionable verb validation (implement, create, fix, enhance)"
          ],
          "validation": "Test with current retrospective files, ensure zero noise entries",
          "impact": "Immediate elimination of ~70% noise in improvements.json"
        },
        {
          "id": "validation_001", 
          "description": "Test parsing fix with existing retrospective files",
          "action": "VALIDATION_TESTING",
          "test_files": [
            ".cortex/retrospectives/2025-06-22_phase_284-prep_workflow_consolidation_-_architecture_unification.md",
            ".cortex/retrospectives/meta-reflection_ia-ia-collaboration.md"
          ],
          "success_criteria": "Zero noise entries generated from test files",
          "validation": "Clean improvements.json output with only actionable content"
        }
      ]
    },
    
    "phase_2": {
      "name": "Schema Enhancement",
      "duration": "45 minutes", 
      "description": "Transform insights into strategy-architect compatible specifications",
      "tasks": [
        {
          "id": "schema_enhancement_001",
          "description": "Enhance improvements.json structure following Universal Response patterns",
          "file": "tools/knowledge_management.py",
          "action": "SCHEMA_ENHANCEMENT",
          "changes": [
            "Add task_specification field with objective, acceptance_criteria",
            "Add technical_scope with files_to_modify, integration_points",
            "Add strategy_architect_ready boolean flag",
            "Maintain backward compatibility with existing entries",
            "Follow CortexMCP Universal Response Schema patterns"
          ],
          "validation": "Enhanced entries can be fed directly to strategy-architect",
          "impact": "Direct workflow from retrospective to actionable blueprints"
        },
        {
          "id": "workflow_integration_001",
          "description": "Test end-to-end workflow: retrospective → enhanced specs → strategy-architect",
          "action": "INTEGRATION_TESTING",
          "workflow_steps": [
            "Generate retrospective with actionable improvements",
            "Process through enhanced process-retrospective",
            "Feed result to strategy-architect for blueprint creation",
            "Validate complete workflow functionality"
          ],
          "success_criteria": "Clean workflow produces actionable blueprints",
          "validation": "End-to-end workflow operational without manual intervention"
        }
      ]
    }
  },

  "enhanced_schema_design": {
    "new_improvement_structure": {
      "id": "task_XXX",
      "title": "Clear actionable title",
      "category": "workflow|tools|architecture|performance",
      "source": "retrospective_YYYY-MM-DD",
      "priority": {
        "business_impact": "high|medium|low",
        "technical_complexity": "high|medium|low", 
        "estimated_duration": "X hours/days",
        "blocking_dependencies": []
      },
      "task_specification": {
        "objective": "What needs to be accomplished",
        "acceptance_criteria": ["Specific success criteria"],
        "technical_scope": {
          "files_to_modify": ["specific files"],
          "integration_points": ["connection points"],
          "validation_steps": ["verification methods"]
        }
      },
      "strategy_architect_ready": true,
      "blueprint_template": "development_tool_creation|workflow_enhancement|etc"
    }
  },

  "anti_over_engineering_guards": {
    "scope_limits": [
      "NO new tools created - enhance existing process-retrospective only",
      "Phase 1 must work standalone - immediate value without Phase 2", 
      "Total time budget: 75 minutes - strict scope control",
      "Incremental validation - test after each phase"
    ],
    "simplicity_requirements": [
      "Maintain existing tool interfaces",
      "Preserve backward compatibility",
      "Focus on quality over complexity",
      "Validate each change incrementally"
    ]
  },

  "success_criteria": {
    "phase_1_gates": [
      "improvements.json contains zero noise entries",
      "All parsing filters working correctly",
      "Existing functionality preserved",
      "Test validation passes on retrospective files"
    ],
    "phase_2_gates": [
      "Enhanced improvements are strategy-architect compatible",
      "End-to-end workflow operational",
      "Backward compatibility maintained", 
      "Schema enhancement complete"
    ],
    "overall_success": [
      "Clean workflow: retrospective → actionable specs → blueprints",
      "Zero manual intervention required",
      "95%+ reduction in noise entries",
      "Direct strategy-architect integration working"
    ]
  },

  "risk_mitigation": {
    "high_priority_risks": [
      {
        "risk": "Breaking existing knowledge management functionality",
        "probability": "MEDIUM",
        "impact": "HIGH",
        "mitigation": "Incremental changes with validation at each step, maintain backward compatibility"
      },
      {
        "risk": "Over-engineering the solution beyond 75-minute scope",
        "probability": "MEDIUM", 
        "impact": "MEDIUM",
        "mitigation": "Strict time boxes, Phase 1 must work standalone, anti-over-engineering guards"
      }
    ],
    "technical_risks": [
      {
        "risk": "Schema changes breaking existing improvements.json entries",
        "mitigation": "Additive changes only, test with existing data"
      },
      {
        "risk": "Parsing logic being too restrictive and filtering valid content",
        "mitigation": "Conservative approach, extensive testing with real retrospective files"
      }
    ]
  },

  "validation_strategy": {
    "test_files": [
      ".cortex/retrospectives/2025-06-22_phase_284-prep_workflow_consolidation_-_architecture_unification.md",
      ".cortex/retrospectives/meta-reflection_ia-ia-collaboration.md"
    ],
    "validation_criteria": [
      "Zero noise entries in output",
      "All actionable content preserved",
      "Enhanced schema validates correctly",
      "Strategy-architect integration functional"
    ]
  },

  "backward_compatibility": {
    "guaranteed": true,
    "mechanism": "Additive schema changes only, existing entries preserved",
    "validation": "All existing knowledge management workflows continue working",
    "migration_strategy": "No migration needed - enhancement is additive"
  },

  "integration_notes": {
    "cortex_mcp_integration": "Follows Universal Response Schema patterns established in CortexMCP",
    "knowledge_management_preservation": "Maintains all existing functionality while adding enhancements",
    "strategy_architect_compatibility": "Enhanced outputs designed for direct strategy-architect consumption",
    "workflow_enhancement": "Enables clean retrospective → specification → blueprint workflow"
  },

  "implementation_context": {
    "follows_pattern": ".cortex/planning/Phase2.8.4-Prep_WorkflowConsolidation_Preparation.json",
    "methodology": "IA-IA collaborative analysis with anti-over-engineering focus",
    "scope_discipline": "Strict 75-minute implementation window with phase gates",
    "quality_priority": "Focus on immediate problem resolution over perfect architecture"
  }
}